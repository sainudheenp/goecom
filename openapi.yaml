openapi: 3.0.3
info:
  title: E-Commerce API
  description: Production-ready Go backend for e-commerce application
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.example.com/api/v1
    description: Production server

tags:
  - name: auth
    description: Authentication endpoints
  - name: products
    description: Product catalog endpoints
  - name: cart
    description: Shopping cart endpoints
  - name: orders
    description: Order management endpoints
  - name: payments
    description: Payment processing endpoints
  - name: admin
    description: Admin-only endpoints

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
        details:
          type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        role:
          type: string
          enum: [user, admin]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        sku:
          type: string
        name:
          type: string
        description:
          type: string
        price_cents:
          type: integer
        currency:
          type: string
        stock:
          type: integer
        images:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CartItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        subtotal_cents:
          type: integer

    Cart:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        total_cents:
          type: integer
        currency:
          type: string

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        total_cents:
          type: integer
        currency:
          type: string
        status:
          type: string
          enum: [pending, paid, shipped, cancelled]
        shipping_address:
          type: object
        payment_info:
          type: object
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        product:
          $ref: '#/components/schemas/Product'
        price_cents:
          type: integer
        quantity:
          type: integer

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                full_name:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                  full_name:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /me:
    get:
      tags:
        - auth
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    get:
      tags:
        - products
      summary: List products
      parameters:
        - name: q
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
        - name: min_price
          in: query
          schema:
            type: integer
        - name: max_price
          in: query
          schema:
            type: integer
        - name: sort
          in: query
          schema:
            type: string
            enum: [price_asc, price_desc, name_asc, name_desc, created_desc]
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  page:
                    type: integer
                  size:
                    type: integer
                  total:
                    type: integer

    post:
      tags:
        - products
        - admin
      summary: Create product (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - sku
                - name
                - price_cents
                - currency
                - stock
              properties:
                sku:
                  type: string
                name:
                  type: string
                description:
                  type: string
                price_cents:
                  type: integer
                currency:
                  type: string
                stock:
                  type: integer
                images:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}:
    get:
      tags:
        - products
      summary: Get product by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - products
        - admin
      summary: Update product (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price_cents:
                  type: integer
                currency:
                  type: string
                stock:
                  type: integer
                images:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    delete:
      tags:
        - products
        - admin
      summary: Delete product (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found

  /cart:
    get:
      tags:
        - cart
      summary: Get user cart
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

    post:
      tags:
        - cart
      summary: Add item to cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - product_id
                - quantity
              properties:
                product_id:
                  type: string
                  format: uuid
                quantity:
                  type: integer
                  minimum: 1
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'

  /cart/{item_id}:
    delete:
      tags:
        - cart
      summary: Remove item from cart
      security:
        - BearerAuth: []
      parameters:
        - name: item_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Item removed from cart

  /orders:
    get:
      tags:
        - orders
      summary: List user orders
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  page:
                    type: integer
                  size:
                    type: integer
                  total:
                    type: integer

    post:
      tags:
        - orders
      summary: Create order from cart
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - shipping_address
              properties:
                shipping_address:
                  type: object
                  properties:
                    line1:
                      type: string
                    line2:
                      type: string
                    city:
                      type: string
                    state:
                      type: string
                    country:
                      type: string
                    postcode:
                      type: string
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /orders/{id}:
    get:
      tags:
        - orders
      summary: Get order by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /payments/charge:
    post:
      tags:
        - payments
      summary: Process payment for order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - order_id
                - payment_method
              properties:
                order_id:
                  type: string
                  format: uuid
                payment_method:
                  type: string
                  enum: [card, upi, wallet]
                payment_details:
                  type: object
      responses:
        '200':
          description: Payment processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  order_id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum: [success, failed]
                  transaction_id:
                    type: string
                  message:
                    type: string

  /admin/orders:
    get:
      tags:
        - admin
      summary: List all orders (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of all orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  page:
                    type: integer
                  size:
                    type: integer
                  total:
                    type: integer

  /admin/orders/{id}:
    patch:
      tags:
        - admin
      summary: Update order status (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [pending, paid, shipped, cancelled]
      responses:
        '200':
          description: Order status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
